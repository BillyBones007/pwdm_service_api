// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/pwdm.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthService_Create_FullMethodName = "/pwdm.AuthService/Create"
	AuthService_Enter_FullMethodName  = "/pwdm.AuthService/Enter"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Create(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error)
	Enter(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Create(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error) {
	out := new(AuthResp)
	err := c.cc.Invoke(ctx, AuthService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Enter(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthResp, error) {
	out := new(AuthResp)
	err := c.cc.Invoke(ctx, AuthService_Enter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	Create(context.Context, *AuthReq) (*AuthResp, error)
	Enter(context.Context, *AuthReq) (*AuthResp, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) Create(context.Context, *AuthReq) (*AuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAuthServiceServer) Enter(context.Context, *AuthReq) (*AuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enter not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Create(ctx, req.(*AuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Enter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Enter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Enter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Enter(ctx, req.(*AuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pwdm.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AuthService_Create_Handler,
		},
		{
			MethodName: "Enter",
			Handler:    _AuthService_Enter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pwdm.proto",
}

const (
	GiveTakeService_InsLogPwd_FullMethodName = "/pwdm.GiveTakeService/InsLogPwd"
	GiveTakeService_InsCard_FullMethodName   = "/pwdm.GiveTakeService/InsCard"
	GiveTakeService_InsText_FullMethodName   = "/pwdm.GiveTakeService/InsText"
	GiveTakeService_InsBinary_FullMethodName = "/pwdm.GiveTakeService/InsBinary"
	GiveTakeService_GetLogPwd_FullMethodName = "/pwdm.GiveTakeService/GetLogPwd"
	GiveTakeService_GetCard_FullMethodName   = "/pwdm.GiveTakeService/GetCard"
	GiveTakeService_GetText_FullMethodName   = "/pwdm.GiveTakeService/GetText"
	GiveTakeService_GetBinary_FullMethodName = "/pwdm.GiveTakeService/GetBinary"
)

// GiveTakeServiceClient is the client API for GiveTakeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GiveTakeServiceClient interface {
	InsLogPwd(ctx context.Context, in *InsertLoginPasswordReq, opts ...grpc.CallOption) (*InsertResp, error)
	InsCard(ctx context.Context, in *InsertCardReq, opts ...grpc.CallOption) (*InsertResp, error)
	InsText(ctx context.Context, in *InsertTextReq, opts ...grpc.CallOption) (*InsertResp, error)
	InsBinary(ctx context.Context, in *InsertBinaryReq, opts ...grpc.CallOption) (*InsertResp, error)
	GetLogPwd(ctx context.Context, in *GetItemReq, opts ...grpc.CallOption) (*GetLoginPasswordResp, error)
	GetCard(ctx context.Context, in *GetItemReq, opts ...grpc.CallOption) (*GetCardResp, error)
	GetText(ctx context.Context, in *GetItemReq, opts ...grpc.CallOption) (*GetTextResp, error)
	GetBinary(ctx context.Context, in *GetItemReq, opts ...grpc.CallOption) (*GetBinaryResp, error)
}

type giveTakeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGiveTakeServiceClient(cc grpc.ClientConnInterface) GiveTakeServiceClient {
	return &giveTakeServiceClient{cc}
}

func (c *giveTakeServiceClient) InsLogPwd(ctx context.Context, in *InsertLoginPasswordReq, opts ...grpc.CallOption) (*InsertResp, error) {
	out := new(InsertResp)
	err := c.cc.Invoke(ctx, GiveTakeService_InsLogPwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giveTakeServiceClient) InsCard(ctx context.Context, in *InsertCardReq, opts ...grpc.CallOption) (*InsertResp, error) {
	out := new(InsertResp)
	err := c.cc.Invoke(ctx, GiveTakeService_InsCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giveTakeServiceClient) InsText(ctx context.Context, in *InsertTextReq, opts ...grpc.CallOption) (*InsertResp, error) {
	out := new(InsertResp)
	err := c.cc.Invoke(ctx, GiveTakeService_InsText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giveTakeServiceClient) InsBinary(ctx context.Context, in *InsertBinaryReq, opts ...grpc.CallOption) (*InsertResp, error) {
	out := new(InsertResp)
	err := c.cc.Invoke(ctx, GiveTakeService_InsBinary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giveTakeServiceClient) GetLogPwd(ctx context.Context, in *GetItemReq, opts ...grpc.CallOption) (*GetLoginPasswordResp, error) {
	out := new(GetLoginPasswordResp)
	err := c.cc.Invoke(ctx, GiveTakeService_GetLogPwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giveTakeServiceClient) GetCard(ctx context.Context, in *GetItemReq, opts ...grpc.CallOption) (*GetCardResp, error) {
	out := new(GetCardResp)
	err := c.cc.Invoke(ctx, GiveTakeService_GetCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giveTakeServiceClient) GetText(ctx context.Context, in *GetItemReq, opts ...grpc.CallOption) (*GetTextResp, error) {
	out := new(GetTextResp)
	err := c.cc.Invoke(ctx, GiveTakeService_GetText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giveTakeServiceClient) GetBinary(ctx context.Context, in *GetItemReq, opts ...grpc.CallOption) (*GetBinaryResp, error) {
	out := new(GetBinaryResp)
	err := c.cc.Invoke(ctx, GiveTakeService_GetBinary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GiveTakeServiceServer is the server API for GiveTakeService service.
// All implementations must embed UnimplementedGiveTakeServiceServer
// for forward compatibility
type GiveTakeServiceServer interface {
	InsLogPwd(context.Context, *InsertLoginPasswordReq) (*InsertResp, error)
	InsCard(context.Context, *InsertCardReq) (*InsertResp, error)
	InsText(context.Context, *InsertTextReq) (*InsertResp, error)
	InsBinary(context.Context, *InsertBinaryReq) (*InsertResp, error)
	GetLogPwd(context.Context, *GetItemReq) (*GetLoginPasswordResp, error)
	GetCard(context.Context, *GetItemReq) (*GetCardResp, error)
	GetText(context.Context, *GetItemReq) (*GetTextResp, error)
	GetBinary(context.Context, *GetItemReq) (*GetBinaryResp, error)
	mustEmbedUnimplementedGiveTakeServiceServer()
}

// UnimplementedGiveTakeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGiveTakeServiceServer struct {
}

func (UnimplementedGiveTakeServiceServer) InsLogPwd(context.Context, *InsertLoginPasswordReq) (*InsertResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsLogPwd not implemented")
}
func (UnimplementedGiveTakeServiceServer) InsCard(context.Context, *InsertCardReq) (*InsertResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsCard not implemented")
}
func (UnimplementedGiveTakeServiceServer) InsText(context.Context, *InsertTextReq) (*InsertResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsText not implemented")
}
func (UnimplementedGiveTakeServiceServer) InsBinary(context.Context, *InsertBinaryReq) (*InsertResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsBinary not implemented")
}
func (UnimplementedGiveTakeServiceServer) GetLogPwd(context.Context, *GetItemReq) (*GetLoginPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogPwd not implemented")
}
func (UnimplementedGiveTakeServiceServer) GetCard(context.Context, *GetItemReq) (*GetCardResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}
func (UnimplementedGiveTakeServiceServer) GetText(context.Context, *GetItemReq) (*GetTextResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetText not implemented")
}
func (UnimplementedGiveTakeServiceServer) GetBinary(context.Context, *GetItemReq) (*GetBinaryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBinary not implemented")
}
func (UnimplementedGiveTakeServiceServer) mustEmbedUnimplementedGiveTakeServiceServer() {}

// UnsafeGiveTakeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GiveTakeServiceServer will
// result in compilation errors.
type UnsafeGiveTakeServiceServer interface {
	mustEmbedUnimplementedGiveTakeServiceServer()
}

func RegisterGiveTakeServiceServer(s grpc.ServiceRegistrar, srv GiveTakeServiceServer) {
	s.RegisterService(&GiveTakeService_ServiceDesc, srv)
}

func _GiveTakeService_InsLogPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertLoginPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiveTakeServiceServer).InsLogPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiveTakeService_InsLogPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiveTakeServiceServer).InsLogPwd(ctx, req.(*InsertLoginPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiveTakeService_InsCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiveTakeServiceServer).InsCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiveTakeService_InsCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiveTakeServiceServer).InsCard(ctx, req.(*InsertCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiveTakeService_InsText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertTextReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiveTakeServiceServer).InsText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiveTakeService_InsText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiveTakeServiceServer).InsText(ctx, req.(*InsertTextReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiveTakeService_InsBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertBinaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiveTakeServiceServer).InsBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiveTakeService_InsBinary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiveTakeServiceServer).InsBinary(ctx, req.(*InsertBinaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiveTakeService_GetLogPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiveTakeServiceServer).GetLogPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiveTakeService_GetLogPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiveTakeServiceServer).GetLogPwd(ctx, req.(*GetItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiveTakeService_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiveTakeServiceServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiveTakeService_GetCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiveTakeServiceServer).GetCard(ctx, req.(*GetItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiveTakeService_GetText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiveTakeServiceServer).GetText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiveTakeService_GetText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiveTakeServiceServer).GetText(ctx, req.(*GetItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiveTakeService_GetBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiveTakeServiceServer).GetBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GiveTakeService_GetBinary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiveTakeServiceServer).GetBinary(ctx, req.(*GetItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GiveTakeService_ServiceDesc is the grpc.ServiceDesc for GiveTakeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GiveTakeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pwdm.GiveTakeService",
	HandlerType: (*GiveTakeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsLogPwd",
			Handler:    _GiveTakeService_InsLogPwd_Handler,
		},
		{
			MethodName: "InsCard",
			Handler:    _GiveTakeService_InsCard_Handler,
		},
		{
			MethodName: "InsText",
			Handler:    _GiveTakeService_InsText_Handler,
		},
		{
			MethodName: "InsBinary",
			Handler:    _GiveTakeService_InsBinary_Handler,
		},
		{
			MethodName: "GetLogPwd",
			Handler:    _GiveTakeService_GetLogPwd_Handler,
		},
		{
			MethodName: "GetCard",
			Handler:    _GiveTakeService_GetCard_Handler,
		},
		{
			MethodName: "GetText",
			Handler:    _GiveTakeService_GetText_Handler,
		},
		{
			MethodName: "GetBinary",
			Handler:    _GiveTakeService_GetBinary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pwdm.proto",
}

const (
	DeleteService_DelItem_FullMethodName = "/pwdm.DeleteService/DelItem"
	DeleteService_DelAll_FullMethodName  = "/pwdm.DeleteService/DelAll"
)

// DeleteServiceClient is the client API for DeleteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeleteServiceClient interface {
	DelItem(ctx context.Context, in *DeleteItemReq, opts ...grpc.CallOption) (*DeleteResp, error)
	DelAll(ctx context.Context, in *DeleteAllReq, opts ...grpc.CallOption) (*DeleteResp, error)
}

type deleteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeleteServiceClient(cc grpc.ClientConnInterface) DeleteServiceClient {
	return &deleteServiceClient{cc}
}

func (c *deleteServiceClient) DelItem(ctx context.Context, in *DeleteItemReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	out := new(DeleteResp)
	err := c.cc.Invoke(ctx, DeleteService_DelItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deleteServiceClient) DelAll(ctx context.Context, in *DeleteAllReq, opts ...grpc.CallOption) (*DeleteResp, error) {
	out := new(DeleteResp)
	err := c.cc.Invoke(ctx, DeleteService_DelAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeleteServiceServer is the server API for DeleteService service.
// All implementations must embed UnimplementedDeleteServiceServer
// for forward compatibility
type DeleteServiceServer interface {
	DelItem(context.Context, *DeleteItemReq) (*DeleteResp, error)
	DelAll(context.Context, *DeleteAllReq) (*DeleteResp, error)
	mustEmbedUnimplementedDeleteServiceServer()
}

// UnimplementedDeleteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeleteServiceServer struct {
}

func (UnimplementedDeleteServiceServer) DelItem(context.Context, *DeleteItemReq) (*DeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelItem not implemented")
}
func (UnimplementedDeleteServiceServer) DelAll(context.Context, *DeleteAllReq) (*DeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAll not implemented")
}
func (UnimplementedDeleteServiceServer) mustEmbedUnimplementedDeleteServiceServer() {}

// UnsafeDeleteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeleteServiceServer will
// result in compilation errors.
type UnsafeDeleteServiceServer interface {
	mustEmbedUnimplementedDeleteServiceServer()
}

func RegisterDeleteServiceServer(s grpc.ServiceRegistrar, srv DeleteServiceServer) {
	s.RegisterService(&DeleteService_ServiceDesc, srv)
}

func _DeleteService_DelItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleteServiceServer).DelItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeleteService_DelItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleteServiceServer).DelItem(ctx, req.(*DeleteItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeleteService_DelAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleteServiceServer).DelAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeleteService_DelAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleteServiceServer).DelAll(ctx, req.(*DeleteAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeleteService_ServiceDesc is the grpc.ServiceDesc for DeleteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeleteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pwdm.DeleteService",
	HandlerType: (*DeleteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DelItem",
			Handler:    _DeleteService_DelItem_Handler,
		},
		{
			MethodName: "DelAll",
			Handler:    _DeleteService_DelAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pwdm.proto",
}

const (
	ShowInfoService_GetInfo_FullMethodName = "/pwdm.ShowInfoService/GetInfo"
)

// ShowInfoServiceClient is the client API for ShowInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShowInfoServiceClient interface {
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShowItemsResp, error)
}

type showInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShowInfoServiceClient(cc grpc.ClientConnInterface) ShowInfoServiceClient {
	return &showInfoServiceClient{cc}
}

func (c *showInfoServiceClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ShowItemsResp, error) {
	out := new(ShowItemsResp)
	err := c.cc.Invoke(ctx, ShowInfoService_GetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShowInfoServiceServer is the server API for ShowInfoService service.
// All implementations must embed UnimplementedShowInfoServiceServer
// for forward compatibility
type ShowInfoServiceServer interface {
	GetInfo(context.Context, *Empty) (*ShowItemsResp, error)
	mustEmbedUnimplementedShowInfoServiceServer()
}

// UnimplementedShowInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShowInfoServiceServer struct {
}

func (UnimplementedShowInfoServiceServer) GetInfo(context.Context, *Empty) (*ShowItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedShowInfoServiceServer) mustEmbedUnimplementedShowInfoServiceServer() {}

// UnsafeShowInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShowInfoServiceServer will
// result in compilation errors.
type UnsafeShowInfoServiceServer interface {
	mustEmbedUnimplementedShowInfoServiceServer()
}

func RegisterShowInfoServiceServer(s grpc.ServiceRegistrar, srv ShowInfoServiceServer) {
	s.RegisterService(&ShowInfoService_ServiceDesc, srv)
}

func _ShowInfoService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowInfoServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowInfoService_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowInfoServiceServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ShowInfoService_ServiceDesc is the grpc.ServiceDesc for ShowInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShowInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pwdm.ShowInfoService",
	HandlerType: (*ShowInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _ShowInfoService_GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pwdm.proto",
}
